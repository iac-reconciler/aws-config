package compare

const (
	configComplianceResourceType         = "AWS::Config::ResourceCompliance"
	resourceContains                     = "Contains"
	resourceAttachedToInstance           = "Is attached to Instance"
	resourceTypeStack                    = "AWS::CloudFormation::Stack"
	resourceTypeElasticBeanstalk         = "AWS::ElasticBeanstalk::Application"
	resourceTypeRouteTable               = "AWS::EC2::RouteTable"
	resourceTypeRoute                    = "AWS::EC2::Route"
	resourceTypeRouteTableAssociation    = "AWS::EC2::SubnetRouteTableAssociation"
	resourceTypeVPCEndpoint              = "AWS::EC2::VPCEndpoint"
	resourceTypeENI                      = "AWS::EC2::NetworkInterface"
	resourceTypeEBSVolume                = "AWS::EC2::Volume"
	resourceTypeEC2Instance              = "AWS::EC2::Instance"
	resourceTypeSecurityGroup            = "AWS::EC2::SecurityGroup"
	resourceTypeEksCluster               = "AWS::EKS::Cluster"
	resourceTypeASG                      = "AWS::AutoScaling::AutoScalingGroup"
	resourceTypeELB                      = "AWS::ElasticLoadBalancing::LoadBalancer"
	resourceTypeELBV2                    = "AWS::ElasticLoadBalancingV2::LoadBalancer"
	resourceTypeRDSInstance              = "AWS::RDS::DBInstance"
	resourceTypeLambda                   = "AWS::Lambda::Function"
	resourceTypeAlarm                    = "AWS::CloudWatch::Alarm"
	resourceTypeIAMRole                  = "AWS::IAM::Role"
	resourceTypeIAMPolicy                = "AWS::IAM::Policy"
	resourceTypeEC2Fleet                 = "AWS::EC2::EC2Fleet"
	resourceTypeLaunchTemplate           = "AWS::EC2::LaunchTemplate"
	resourceTypeNATGateway               = "AWS::EC2::NatGateway"
	resourceTypeElastiCacheCluster       = "AWS::ElastiCache::CacheCluster"
	resourceTypeTransitGatewayAttachment = "AWS::EC2::TransitGatewayAttachment"
	resourceTypeNetworkACL               = "AWS::EC2::NetworkAcl"
	resourceTypeNetworkACLRule           = "AWS::EC2::NetworkAclEntry"
	resourceTypeService                  = "AWS::Service"
	eksEniOwnerTagName                   = "eks:eni:owner"
	eksEniOwnerTagValue                  = "eks-vpc-resource-controller"
	terraformIAMPolicyType               = "aws_iam_policy"
	nlb                                  = "network_load_balancer"
	eksClusterOwnerTagNamePrefix         = "kubernetes.io/cluster/"
	owned                                = "owned"
	nameRoleAttached                     = "Is attached to Role"
	awsELBOwner                          = "amazon-elb"
	lambdaInterfaceType                  = "lambda"
	lambdaPrefix                         = "AWS Lambda VPC ENI-"
	natGatewayInterfaceType              = "nat_gateway"
	natGatewayPrefix                     = "Interface for NAT Gateway "
	transitGatewayInterfaceType          = "transit_gateway"
	transitGatewayPrefix                 = "Network Interface for Transit Gateway Attachment "
	elastiCachePrefix                    = "ElastiCache "
	elbPrefix                            = "ELB "
	cloudWatchNamespaceELB               = "AWS/ELB"
	k8sInstanceTag                       = "node.k8s.amazonaws.com/instance_id"
	rdsENI                               = "RDSNetworkInterface"
	elbArnPrefix                         = "arn:aws:elasticloadbalancing"
	dimensionLoadBalancerName            = "LoadBalancerName"
	ingress                              = "ingress"
	egress                               = "egress"
	serviceLinkedRolePathPrefix          = "/aws-service-role/"

	terraformAWSRegistryProvider      = `provider["registry.terraform.io/hashicorp/aws"]`
	terraformAWSProvider              = "provider.aws"
	terraformTypeSecurityGroupRule    = "aws_security_group_rule"
	terraformTypeRoute                = "aws_route"
	terraformTypeRolePolicyAttachment = "aws_iam_role_policy_attachment"
	terraformTypeNetworkACLRule       = "aws_network_acl_rule"
	terraformTypeASGAttachment        = "aws_autoscaling_attachment"
)
